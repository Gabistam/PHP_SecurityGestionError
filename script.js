// Donn√©es des quiz avec explications d√©taill√©es pour le cours s√©curit√© PHP
const quizData = {
    1: [
        {
            explanation: "43% des cyberattaques visent effectivement les petites entreprises, souvent moins bien prot√©g√©es que les grandes corporations."
        },
        {
            explanation: "Afficher les erreurs compl√®tes aux utilisateurs r√©v√®le des informations sensibles comme les chemins de fichiers, noms de base de donn√©es, structure des requ√™tes SQL, etc. C'est une mine d'or pour les pirates !"
        },
        {
            explanation: "En production, il faut toujours logger les erreurs en d√©tail pour le debug (display_errors = Off, log_errors = On) et afficher un message simple et rassurant √† l'utilisateur."
        },
        {
            explanation: "PDO::ATTR_ERRMODE avec PDO::ERRMODE_EXCEPTION permet de transformer toutes les erreurs PDO en exceptions, facilitant leur gestion avec try-catch."
        },
        {
            explanation: "Les exceptions personnalis√©es permettent de g√©rer diff√©remment chaque type d'erreur (ValidationException, DatabaseException, etc.) avec des traitements sp√©cifiques."
        }
    ],
    2: [
        {
            explanation: "Les requ√™tes pr√©par√©es (prepared statements) s√©parent compl√®tement le code SQL des donn√©es, rendant impossible l'injection SQL m√™me avec des donn√©es malveillantes."
        },
        {
            explanation: "XSS signifie Cross-Site Scripting - l'injection de code JavaScript malveillant dans une page web pour l'ex√©cuter chez les visiteurs."
        },
        {
            explanation: "Les tokens CSRF uniques et v√©rifi√©s c√¥t√© serveur emp√™chent qu'un site malveillant force des actions non autoris√©es au nom de l'utilisateur connect√©."
        },
        {
            explanation: "La validation c√¥t√© client (JavaScript) peut √™tre facilement contourn√©e. Il faut TOUJOURS valider c√¥t√© serveur car c'est le seul endroit s√ªr et contr√¥l√©."
        },
        {
            explanation: "htmlspecialchars() convertit les caract√®res sp√©ciaux HTML (&lt;, &gt;, &amp;, etc.) en entit√©s HTML, emp√™chant l'ex√©cution de code JavaScript malveillant."
        }
    ],
    3: [
        {
            explanation: "password_hash() utilise des algorithmes modernes comme bcrypt avec salt automatique, contrairement aux anciennes fonctions comme md5() ou sha1() qui sont vuln√©rables."
        },
        {
            explanation: "session_regenerate_id() apr√®s connexion emp√™che les attaques de fixation de session o√π un pirate impose un ID de session √† la victime."
        },
        {
            explanation: "X-Frame-Options: DENY emp√™che l'affichage de votre page dans une iframe, prot√©geant contre les attaques de clickjacking."
        },
        {
            explanation: "En production, display_errors doit √™tre √† Off pour ne jamais r√©v√©ler d'informations techniques aux utilisateurs. Utilisez log_errors = On pour conserver les d√©tails en interne."
        },
        {
            explanation: "La d√©fense en profondeur signifie multiplier les couches de s√©curit√© (application, serveur, r√©seau) pour qu'une faille dans une couche ne compromette pas tout le syst√®me."
        }
    ]
};

let quizScores = {};

// Fonction pour m√©langer un tableau (Fisher-Yates shuffle)
function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// Fonction pour randomiser les positions des r√©ponses dans tous les quiz
function randomizeQuizAnswers() {
    document.querySelectorAll('[id^="quiz"]').forEach(quizElement => {
        const quizId = quizElement.id.replace('quiz', '');

        quizElement.querySelectorAll('.quiz-question').forEach((questionElement, questionIndex) => {
            const optionsContainer = questionElement.querySelector('.quiz-options');
            if (!optionsContainer) return;

            const buttons = Array.from(optionsContainer.querySelectorAll('.quiz-option'));
            if (buttons.length === 0) return;

            const buttonData = buttons.map(button => {
                const isCorrect = button.getAttribute('data-correct') === 'true';
                const text = button.textContent.trim();

                // Extraire la lettre et le contenu
                let letter = '';
                let content = text;
                if (text.match(/^[A-C]\)/)) {
                    letter = text.substring(0, 2);
                    content = text.substring(3);
                }

                return {
                    isCorrect: isCorrect,
                    content: content,
                    originalLetter: letter
                };
            });

            // M√©langer les donn√©es
            const shuffledData = shuffleArray(buttonData);

            // Remettre les boutons dans l'ordre m√©lang√© avec nouvelles lettres
            const letters = ['A)', 'B)', 'C)'];
            optionsContainer.innerHTML = '';

            shuffledData.forEach((data, index) => {
                const newButton = document.createElement('button');
                newButton.className = 'quiz-option';
                newButton.setAttribute('data-correct', data.isCorrect);

                // Si c'√©tait un vrai/faux, pas de lettre
                if (data.originalLetter) {
                    newButton.textContent = `${letters[index]} ${data.content}`;
                } else {
                    newButton.textContent = data.content;
                }

                newButton.onclick = function() {
                    selectAnswer(parseInt(quizId), questionIndex + 1, data.isCorrect, this);
                };
                optionsContainer.appendChild(newButton);
            });
        });
    });
}

function toggleIntro(introId) {
    const content = document.getElementById(`intro${introId}`);
    const arrow = content.previousElementSibling.querySelector('.intro-arrow');

    if (content.classList.contains('open')) {
        content.classList.remove('open');
        arrow.classList.remove('open');
    } else {
        content.classList.add('open');
        arrow.classList.add('open');
    }
}

function toggleQuiz(quizId) {
    const content = document.getElementById(`quiz${quizId}`);
    const arrow = content.previousElementSibling.querySelector('.quiz-arrow');

    if (content.classList.contains('open')) {
        content.classList.remove('open');
        arrow.classList.remove('open');
    } else {
        content.classList.add('open');
        arrow.classList.add('open');
    }
}

function selectAnswer(quizId, questionId, isCorrect, buttonElement) {
    const question = buttonElement.closest('.quiz-question');
    const options = question.querySelectorAll('.quiz-option');
    const feedback = question.querySelector('.quiz-feedback');
    const feedbackText = feedback.querySelector('.feedback-text');

    // D√©sactiver tous les boutons
    options.forEach(option => {
        option.style.pointerEvents = 'none';
        const optionIsCorrect = option.getAttribute('data-correct') === 'true';
        if (optionIsCorrect) {
            option.classList.add('correct');
        } else if (option === buttonElement && !isCorrect) {
            option.classList.add('incorrect');
        }
    });

    // Afficher le feedback
    const data = quizData[quizId][questionId - 1];
    feedbackText.innerHTML = `<strong>${isCorrect ? '‚úÖ Correct !' : '‚ùå Incorrect.'}</strong><br>${data.explanation}`;
    feedback.classList.add('show');
    feedback.classList.add(isCorrect ? 'feedback-correct' : 'feedback-incorrect');

    // Comptabiliser le score
    if (!quizScores[quizId]) {
        quizScores[quizId] = { correct: 0, total: 0 };
    }

    if (isCorrect) {
        quizScores[quizId].correct++;
    }
    quizScores[quizId].total++;

    // Afficher le score si toutes les questions sont r√©pondues
    if (quizScores[quizId].total === 5) {
        setTimeout(() => showQuizScore(quizId), 1000);
    }
}

function showQuizScore(quizId) {
    const score = quizScores[quizId];
    const scoreElement = document.querySelector(`#quiz${quizId} .quiz-score`);
    const scoreText = scoreElement.querySelector('.score-text');
    const percentage = Math.round((score.correct / score.total) * 100);

    let message = '';
    let emoji = '';

    if (percentage >= 80) {
        emoji = 'üõ°Ô∏è';
        message = 'Excellent ! Vous ma√Ætrisez parfaitement les concepts de s√©curit√© PHP. Vos applications seront bien prot√©g√©es !';
    } else if (percentage >= 60) {
        emoji = 'üîí';
        message = 'Bon travail ! Relisez les sections o√π vous avez eu des difficult√©s pour renforcer vos d√©fenses.';
    } else {
        emoji = '‚ö†Ô∏è';
        message = 'Attention ! Il faut absolument revoir ce chapitre. La s√©curit√© ne souffre aucune approximation !';
    }

    scoreText.innerHTML = `${emoji} Score : ${score.correct}/${score.total} (${percentage}%)<br><br>${message}`;
    scoreElement.classList.add('show');
}

function toggleCheckbox(item) {
    const checkbox = item.querySelector('.checkbox');
    checkbox.classList.toggle('checked');

    if (checkbox.classList.contains('checked')) {
        item.style.transform = 'translateX(10px)';
        setTimeout(() => {
            item.style.transform = 'translateX(0)';
        }, 200);
    }
}

function smoothScroll() {
    const links = document.querySelectorAll('.nav-links a');
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            const navHeight = document.querySelector('.nav-fixed').offsetHeight;
            const targetPosition = target.offsetTop - navHeight - 20;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        });
    });
}

function updateActiveNav() {
    const sections = document.querySelectorAll('.section, #intro');
    const navLinks = document.querySelectorAll('.nav-links a');
    const navHeight = document.querySelector('.nav-fixed').offsetHeight;

    function highlightNavigation() {
        let current = '';
        const scrollPosition = window.pageYOffset + navHeight + 50;

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionBottom = sectionTop + section.offsetHeight;

            if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
                current = section.getAttribute('id');
            }
        });

        if (window.pageYOffset < 100) {
            current = 'intro';
        }

        navLinks.forEach(link => {
            link.classList.remove('active');
            const href = link.getAttribute('href');
            if (href === `#${current}`) {
                link.classList.add('active');
            }
        });
    }

    let scrollTimeout;
    window.addEventListener('scroll', () => {
        if (scrollTimeout) {
            cancelAnimationFrame(scrollTimeout);
        }
        scrollTimeout = requestAnimationFrame(highlightNavigation);
    });

    highlightNavigation();
}

// Fonction pour afficher un message d'encouragement personnalis√©
function showMotivationalMessage() {
    const messages = [
        "üîê La s√©curit√©, c'est comme le sport : il faut s'entra√Æner r√©guli√®rement !",
        "üõ°Ô∏è Un d√©veloppeur s√©curis√© en vaut deux !",
        "‚ö° Chaque vuln√©rabilit√© corrig√©e vous rend plus fort !",
        "üéØ Vous √™tes maintenant un gardien du web s√©curis√© !",
        "üîí La s√©curit√© n'est pas une option, c'est une responsabilit√© !"
    ];
    
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    
    // Afficher le message apr√®s 3 secondes de navigation
    setTimeout(() => {
        console.log(randomMessage);
        
        // Cr√©er une notification discr√®te
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 999;
            font-size: 0.9em;
            max-width: 300px;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        `;
        notification.innerHTML = randomMessage;
        
        document.body.appendChild(notification);
        
        // Animation d'entr√©e
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Suppression automatique apr√®s 4 secondes
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
        
    }, 3000);
}

// Fonction pour compter les √©l√©ments coch√©s dans la checklist
function updateChecklistProgress() {
    const checkboxes = document.querySelectorAll('.checkbox');
    const checkedBoxes = document.querySelectorAll('.checkbox.checked');
    
    if (checkboxes.length > 0) {
        const progress = Math.round((checkedBoxes.length / checkboxes.length) * 100);
        
        // Afficher le progr√®s dans la console pour debugging
        console.log(`üìã Progression checklist : ${checkedBoxes.length}/${checkboxes.length} (${progress}%)`);
        
        // Message d'encouragement selon le progr√®s
        if (progress === 100) {
            setTimeout(() => {
                const completionMessage = document.createElement('div');
                completionMessage.style.cssText = `
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: linear-gradient(135deg, #10b981, #059669);
                    color: white;
                    padding: 30px;
                    border-radius: 12px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
                    z-index: 1000;
                    text-align: center;
                    font-size: 1.1em;
                    opacity: 0;
                    transform: translate(-50%, -50%) scale(0.8);
                    transition: all 0.3s ease;
                `;
                completionMessage.innerHTML = `
                    <h3 style="margin: 0 0 15px 0;">üéâ Checklist compl√©t√©e !</h3>
                    <p style="margin: 0;">Vous √™tes maintenant pr√™t √† d√©velopper des applications PHP s√©curis√©es !</p>
                `;
                
                document.body.appendChild(completionMessage);
                
                setTimeout(() => {
                    completionMessage.style.opacity = '1';
                    completionMessage.style.transform = 'translate(-50%, -50%) scale(1)';
                }, 100);
                
                setTimeout(() => {
                    completionMessage.style.opacity = '0';
                    completionMessage.style.transform = 'translate(-50%, -50%) scale(0.8)';
                    setTimeout(() => {
                        if (completionMessage.parentNode) {
                            completionMessage.parentNode.removeChild(completionMessage);
                        }
                    }, 300);
                }, 3000);
            }, 500);
        }
    }
}

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    // Randomiser les r√©ponses des quiz
    randomizeQuizAnswers();

    // Activer le smooth scroll
    smoothScroll();

    // Activer la navigation active
    updateActiveNav();

    // Afficher un message motivationnel
    showMotivationalMessage();

    // Ajouter un listener pour la checklist
    document.addEventListener('click', function(e) {
        if (e.target.closest('.checklist-item')) {
            // Petite pause pour laisser l'animation se faire
            setTimeout(updateChecklistProgress, 300);
        }
    });

    // Message de confirmation avec style s√©curit√©
    setTimeout(() => {
        console.log('üîê Cours S√©curit√© PHP charg√© avec succ√®s !');
        console.log('üé≤ Les r√©ponses des quiz ont √©t√© randomis√©es.');
        console.log('üõ°Ô∏è Syst√®me de s√©curit√© interactif activ√©.');
        console.log('‚ö° Pr√™t pour l\'apprentissage de la s√©curit√© PHP !');
    }, 1000);

    // Ajout d'easter eggs pour l'engagement
    let securityTipCount = 0;
    const securityTips = [
        "üí° Astuce : Utilisez toujours HTTPS, m√™me en d√©veloppement local avec un certificat auto-sign√© !",
        "üîç Conseil : Auditez r√©guli√®rement vos d√©pendances avec 'composer audit' !",
        "üõ°Ô∏è Rappel : La s√©curit√© par l'obscurit√© n'est pas de la s√©curit√© !",
        "‚ö° Tip : Configurez des CSP headers pour bloquer les injections XSS !",
        "üîê Note : Un mot de passe fort vaut mieux que 10 protections faibles !"
    ];

    // Afficher une astuce s√©curit√© toutes les 30 secondes
    setInterval(() => {
        if (securityTipCount < securityTips.length) {
            console.log(securityTips[securityTipCount]);
            securityTipCount++;
        }
    }, 30000);

    // D√©tecter la section active pour des conseils contextuels
    let lastActiveSection = '';
    const sectionTips = {
        'erreurs': 'Conseil section erreurs : Loggez tout, affichez peu !',
        'vulnerabilites': 'Conseil section vuln√©rabilit√©s : Pensez comme un attaquant pour mieux vous d√©fendre !',
        'validation': 'Conseil section validation : Validation c√¥t√© client = UX, validation c√¥t√© serveur = s√©curit√© !',
        'authentification': 'Conseil section auth : 2FA > mot de passe complexe > mot de passe simple !',
        'bonnes-pratiques': 'Conseil section pratiques : La s√©curit√© est un marathon, pas un sprint !'
    };

    window.addEventListener('scroll', () => {
        const currentSection = document.querySelector('.nav-links a.active')?.getAttribute('href')?.substring(1);
        if (currentSection && currentSection !== lastActiveSection && sectionTips[currentSection]) {
            console.log('üìç ' + sectionTips[currentSection]);
            lastActiveSection = currentSection;
        }
    });
});

// Fonction utilitaire pour debug (peut √™tre supprim√©e en production)
function debugQuizData() {
    console.log('üîç Debug des donn√©es de quiz :');
    Object.keys(quizData).forEach(quizId => {
        console.log(`Quiz ${quizId} : ${quizData[quizId].length} questions`);
        quizData[quizId].forEach((data, index) => {
            console.log(`  Q${index + 1}: ${data.explanation.substring(0, 50)}...`);
        });
    });
}

// Fonction pour exporter les r√©sultats des quiz (fonctionnalit√© bonus)
function exportQuizResults() {
    if (Object.keys(quizScores).length === 0) {
        console.log('‚ùå Aucun quiz compl√©t√© √† exporter');
        return;
    }

    const results = {
        date: new Date().toISOString(),
        course: 'S√©curit√© et Gestion d\'Erreurs en PHP',
        scores: quizScores,
        totalQuestions: Object.values(quizScores).reduce((sum, quiz) => sum + quiz.total, 0),
        totalCorrect: Object.values(quizScores).reduce((sum, quiz) => sum + quiz.correct, 0)
    };

    results.globalPercentage = Math.round((results.totalCorrect / results.totalQuestions) * 100);

    console.log('üìä R√©sultats des quiz :', results);
    
    // Cr√©ation d'un blob pour t√©l√©chargement (optionnel)
    const dataStr = JSON.stringify(results, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    return results;
}

// Rendre certaines fonctions accessibles globalement pour les tests
window.debugQuizData = debugQuizData;
window.exportQuizResults = exportQuizResults;